(self.webpackChunkdigital_security_reference=self.webpackChunkdigital_security_reference||[]).push([[222],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(o,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64301:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return o},default:function(){return p}});var r=n(22122),a=n(19756),i=(n(67294),n(3905)),l={title:"Plumbing Commands",sidebar_position:3},c={unversionedId:"git/cli/plumbing",id:"git/cli/plumbing",isDocsHomePage:!1,title:"Plumbing Commands",description:"cat-file",source:"@site/docs/git/cli/plumbing.mdx",sourceDirName:"git/cli",slug:"/git/cli/plumbing",permalink:"/software-engineering-reference/git/cli/plumbing",version:"current",sidebarPosition:3,frontMatter:{title:"Plumbing Commands",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Porcelain Commands",permalink:"/software-engineering-reference/git/cli/porcelain"}},o=[{value:"cat-file",id:"cat-file",children:[{value:"Examples",id:"examples",children:[]}]},{value:"commit-tree",id:"commit-tree",children:[{value:"Examples",id:"examples-1",children:[]}]},{value:"hash-object",id:"hash-object",children:[{value:"Examples",id:"examples-2",children:[]}]},{value:"update-ref",id:"update-ref",children:[{value:"Examples",id:"examples-3",children:[]}]},{value:"write-tree",id:"write-tree",children:[{value:"Examples",id:"examples-4",children:[]}]}],s={toc:o};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"cat-file"},"cat-file"),(0,i.kt)("p",null,"Provides information regarding repository objects such as their type,\ncontent and size."),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"$ git cat-file --batch-all-objects --batch\n\nf7e2dd07890b1a49d80705230e43ca8420439887 blob 10\nMy project\n")),(0,i.kt)("h2",{id:"commit-tree"},"commit-tree"),(0,i.kt)("p",null,"Creates a new commit object."),(0,i.kt)("h3",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'$ git commit-tree -m "COMMIT_MESSAGE" 6dabf49129f970f089cb7ef94fa53609a6a2815f\n\n9d697bc9a410749ac0e9acdb3f6361d3c9af5fa4\n')),(0,i.kt)("h2",{id:"hash-object"},"hash-object"),(0,i.kt)("p",null,"Calculates an object hash from a file or the standard input.\nOptionally saves it alongside the object in the git database."),(0,i.kt)("h3",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "BLOB_CONTENTS" | hash-object --stdin -w\n\nb9bb0bbb048fcfb90a6f879bd512b8548a9e576b\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "100644 blob b9bb0bbb048fcfb90a6f879bd512b8548a9e576b README.md" | git hash-object --stdin -w\n\nd8d7682b815204740964f2ab1c82bb3df7dfe195\n')),(0,i.kt)("h2",{id:"update-ref"},"update-ref"),(0,i.kt)("p",null,"Updates a reference value safely."),(0,i.kt)("h3",{id:"examples-3"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git update-ref refs/heads/master 9d697bc9a410749ac0e9acdb3f6361d3c9af5fa4\n")),(0,i.kt)("h2",{id:"write-tree"},"write-tree"),(0,i.kt)("p",null,"Creates a tree object based on the current index contents."),(0,i.kt)("h3",{id:"examples-4"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git write-tree\n\n6dabf49129f970f089cb7ef94fa53609a6a2815f\n")))}p.isMDXComponent=!0}}]);